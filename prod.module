<?php

/**
 * @file
 * Prod module file.
 */

/**
 * Define a custom autoloader if non declared, this prerequisite that the
 * library lives under the same folder hierarchy than the composer package.
 */
if (!class_exists('Drupal\Prod\Db\AnalyzerInterface')) {
  // No autoloader as detected our objects, so register a simple one
  // This is a PHP >= 5.3 code, but it is required for this module.
  spl_autoload_register(function($classname) { // PSR-4 autoloader
    if (0 === strpos($classname, 'Drupal\\Prod\\')) {
      $filename = dirname(__FILE__) 
          . DIRECTORY_SEPARATOR 
          . 'src' 
          . DIRECTORY_SEPARATOR 
          . 'Prod' 
          . DIRECTORY_SEPARATOR 
          . str_replace('\\', DIRECTORY_SEPARATOR, substr($classname, 12)) 
          . '.php';
        return (bool)require_once $filename;
    }
    return false;
  });
}


/**
 * Implements hook_menu().
 */
function prod_menu() {
  
  $items = array();
  
  /****************************************************************************
   *
   * Reports
   *
   ****************************************************************************/
  

  $items['admin/reports/prod/ajax/%'] = array(
    'title'            => t('Ajax connector for Prod data - definitions'),
    'description'      => 'Prod Database Trackers reports',
    'page callback'    => 'prod_admin_ajax_json_def',
    'page arguments'   => array(4),
    'access arguments' => array('access prod module stats'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_CALLBACK
  );
  $items['admin/reports/prod/ajax/%/%/%/%'] = array(
    'title'            => t('Ajax connector for Prod data'),
    'description'      => 'Prod Database Trackers reports',
    'page callback'    => 'prod_admin_ajax_json_result',
    'page arguments'   => array(4,5,6,7),
    'access arguments' => array('access prod module stats'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_CALLBACK
  );
  
  $items['admin/reports/prod'] = array(
    'title'            => t('Prod'),
    'description'      => 'Prod Trackers',
    'page callback'    => 'prod_admin_page',
    'access arguments' => array('access prod module backoffice pages'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -100,
  );
  

  $items['admin/reports/prod/db'] = array(
    'title'            => t('Database Stats'),
    'description'      => 'Prod Database Trackers',
    'page callback'    => 'prod_admin_page_db',
    'access arguments' => array('access prod module stats'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/reports/prod/users'] = array(
    'title'            => t('Users Stats'),
    'description'      => 'Prod Users Trackers',
    'page callback'    => 'prod_admin_page_users',
    'access arguments' => array('access prod module stats'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_LOCAL_TASK,
  );
  
  $items['admin/reports/prod/nodes'] = array(
    'title'            => t('Nodes Stats'),
    'description'      => 'Prod Users Trackers',
    'page callback'    => 'prod_admin_page_nodes',
    'access arguments' => array('access prod module stats'),
    'file'             => 'prod.admin.inc',
    'file path'        => drupal_get_path('module', 'prod'),
    'type'             => MENU_LOCAL_TASK,
  );
  
  /****************************************************************************
   *
   * Settings
   *
   ****************************************************************************/
  
  $items['admin/config/prod'] = array(
      'title'            => t("Prod Configuration"),
      'description'      => "Manage Prod module settings.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('prod_admin_config_form'),
      'access arguments' => array('access prod module configuration'),
      'file'             => 'prod.admin.inc',
      'file path'        => drupal_get_path('module', 'prod'),
      'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/config/prod/collector'] = array(
      'title'            => t('Prod collectors'),
      'description'      => "Manage Prod module's collectors settings",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('prod_admin_config_collectors_form'),
      'access arguments' => array('access prod module configuration'),
      'file'             => 'prod.admin.inc',
      'file path'        => drupal_get_path('module', 'prod'),
      'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/prod/rrd'] = array(
      'title'            => t('Prod RRD'),
      'description'      => "Manage Prod module's RRD settings",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('prod_admin_config_rrd_form'),
      'access arguments' => array('access prod module configuration'),
      'file'             => 'prod.admin.inc',
      'file path'        => drupal_get_path('module', 'prod'),
      'type'             => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implements hook_cron().
 * if elysia_cron is not present this will make a poor man's elysia_cron
 */
function prod_cron() {
  // yes, it's FALSE by default because that may be quite heavy for your website
  // the alternative method is to call the direct drush methods and register
  // that in a custom cron. Or use elysia_cron, but even with elysia_cron
  // you should use drush to call elysia
  if (!module_exists('elysia_cron') && variable_get('allow_prod_asynchronous_task_via_classical_cron', FALSE)) {

    if (variable_get('prod_fs_watch_enabled', TRUE)) {
      module_load_include('inc', 'prod', 'prod_fs_watcher');
      // this will only index a very little part of the filesystem
      // you should'nt use the base cron, try elysia_cron instead
      prod_filesystem_watcher_indexer();
      prod_filesystem_watcher_cleaner();
    }

    if (variable_get('prod_stats_enabled', TRUE)) {
      module_load_include('inc', 'prod', 'prod_stats_drupal');
      prod_drupal_stats_indexer();
    }

    prod_filesystem_watcher_report();

  }
}

/**
 * Implements elysia_cron's hook_cronapi()
 */
function prod_cronapi($op, $job = NULL) {

  // Warning, that's some heavy stuff, call elysia via drush, please

  if (variable_get('prod_fs_watch_enabled', FALSE)) {
    $items['prod_filesystem_watcher_indexer'] = array(
      'description' => 'Prod: Indexation of the filesystem, small parts at each run',
      'rule' => '*/5 * * * *', // Every 5 minutes
      'file' => 'prod_fs_watcher.inc'
    );
    $items['prod_filesystem_watcher_cleaner'] = array(
      'description' => 'Prod: Clean deleted files from filesystem watcher',
      'rule' => '09 04 * * *', // Every day at 04:09
      'file' => 'prod_fs_watcher.inc'
    );
  }

  if (variable_get('prod_stats_enabled', TRUE)) {
    $items['prod_drupal_stats_indexer'] = array(
      'description' => 'Prod: collect statistics and perform RRD rotations if needed',
      'rule' => '0/5 * * * *', // Every 5 minutes
      'file' => 'prod_stats_drupal.inc'
    );
  }
  // TODO: seems the file inclusion does not work, check that
    $items['drush_prod_drupal_stats_indexer'] = array(
      'description' => 'Prod2: collect statistics and perform RRD rotations if needed',
      'rule' => '0/5 * * * *', // Every 5 minutes
    );
/*
  $items['prod_report'] = array(
    'description' => 'Send the report',
    'rule' => '07 03 * * *', // Every day at 03:07
  );
*/
  return $items;
}

/**
 * Drush wrappers
 */
function drush_prod_drupal_stats_indexer() {
  module_load_include('inc', 'prod', 'prod_stats_drupal');
  prod_drupal_stats_indexer();
}

function drush_prod_filesystem_watcher_cleaner() {
  module_load_include('inc', 'prod', 'prod_fs_watcher');
  prod_filesystem_watcher_cleaner();
}

function drush_prod_filesystem_watcher_indexer() {
  module_load_include('inc', 'prod', 'prod_fs_watcher');
  prod_filesystem_watcher_indexer();
}

function drush_prod_monitor() {
  module_load_include('inc', 'prod', 'prod_monitoring');
  prod_monitor();
}

function drush_prod_monitor_stats() {
  module_load_include('inc', 'prod', 'prod_monitoring');
  prod_monitor_stats();
}


/**
 * Summary of findings
 */
function prod_report() {
}

/**
 * Implements hook_theme().
 */
function prod_theme() {
  return array(
    'prod_admin_display_results' => array(
      'variables'      => array('results' => NULL),
      'render element' => 'content',
      /*'file'           => 'prod.theme.inc',*/
      'template'       => 'prod-admin-display-results',
    ),/*
    'stat_table' => array(
      'render element' => 'content',
      'template'       => 'prod-stat-table',
    ),*/
  );
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_prod_admin_display_results(&$variables) {
//var_dump($variables); die('hard');
/*
    $variables['items'] = $variables['content']['#items'];
  if (isset($variables['block']['#list'])) {
    $variables['list'] = &$variables['block']['#list'];
  } else {
    $variables['list'] = array();
  }
  $variables['pager'] = isset($variables['block']['#pager']) ? $variables['block']['#pager'] : NULL;
  $variables['more_link'] = isset($variables['block']['#more_link']) ? $variables['block']['#more_link'] : NULL;
*/
  
}
